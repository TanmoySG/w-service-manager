// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Service Onboarding Contract.
type Contract struct {
	// Information about Data Required and Usage
	Data map[string]interface{} `json:"data"`

	// Information about the App/Servie Owner/Representative
	Developer struct {
		// Service Admin - An Overall Service Admin Mail
		Admin []string `json:"admin"`

		// Service Contributor - A group Mail ID or DL for Contibutors
		Contributor *[]string `json:"contributor,omitempty"`
	} `json:"developer"`

	// Kind/Identifier for the Type of Document/Data
	Kind Kind `json:"kind"`

	// Service Onboarding
	RequestId string `json:"request_id"`

	// Information about Service
	Service struct {
		// Information about what the Service does.
		Details []string `json:"details"`

		// Name of Service
		Name string `json:"name"`

		// Open Source Repository for Service
		Repository *string `json:"repository,omitempty"`
	} `json:"service"`
}

// FieldLevelValidity defines model for FieldLevelValidity.
type FieldLevelValidity = []struct {
	Error *string `json:"error,omitempty"`
	Field *string `json:"field,omitempty"`
	Valid *bool   `json:"valid,omitempty"`
}

// Kind/Identifier for the Type of Document/Data
type Kind = string

// Validations defines model for Validations.
type Validations struct {
	// Error, if valid : false, otherwise null
	Error              string              `json:"error"`
	FieldLevelValidity *FieldLevelValidity `json:"field_level_validity,omitempty"`
	Valid              bool                `json:"valid"`
}

// Validity Checks
type ValidityChecks struct {
	DataAccess  *Validations `json:"data_access,omitempty"`
	Repository  *Validations `json:"repository,omitempty"`
	ServiceName *Validations `json:"service_name,omitempty"`
}

// Spec defines model for spec.
type Spec struct {
	// Service Onboarding Contract.
	Contract Contract `json:"contract"`

	// Service Contract ID
	ContractId string `json:"contract_id"`

	// Kind/Identifier for the Type of Document/Data
	Kind Kind `json:"kind"`

	// Service Onboarding Request ID
	RequestId string `json:"request_id"`

	// Name of the Service. Should be URL/Computer Friendly - words seperated by dot (.), hyphens(-), underscore (_) and in smaller case.
	ServiceName string `json:"service_name"`

	// Validity Checks
	Validity ValidityChecks `json:"validity"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RWwW7jNhD9lQHbQwIoNtqjb0HcBYxNm8Lp9lIExpgcRexKJDukHBgL/3tBSrYlS1bd",
	"w14MS3x8nHlvZsRvQtrKWUMmeLH4JrwsqML098mawChD/K/IS9YuaGvEQrwS77QkeDFbi6y0eYcjeCYy",
	"4dg64qAp0SgMOKRYmdxyhfEJcGvrAEsMCGv6p9ZMCtAo+OLxnSIfhkBsfu/R/hh/+iehlOT98KzH9B7C",
	"3kU2HahKIDJ1JRZ/CSZU4u2QiQRYCGTGvThkovY0JEtBQSd8cdroA2vzLg6HTHCbR+Rvw2r43k5ou/2b",
	"ZEjoizeZULSjMqZ2i3ChIHh0bp5cIXj5MMTzNTkmTyZg0DsamIKq0ua6sY9xGR7g0cDLjhjLEvpLv6Iu",
	"u1peKJCJSptVs/jTUFgZi0Vv62D5egxPZ1CMBN7Z1i4dDKslWIblM+SWE66B+cmI+kFcepT0eBux4qs2",
	"KtUbUy4W4of5uV/mbbPMP0dMy0g+bLS6qWeGlZMJ38Bu8b1lHDYcBdSlv4Xio8Cmfo7RKUt+dqOxPw+N",
	"NViNhP4bVgQ27wQ8YGVy1utgeT/c/uLIwKutWRKsT7jk/VXGC3tTXNlJmdEm7OKT6T0/z85kzUTrNulY",
	"3XzSVKrnCPkTS610SJmddO1bRsxNKwyEySPN6Mou0nZWttaWhGZ8oFwa9bmt6r7S8e18pcgEnWviJHGs",
	"jj/2Lhm4tLKuyIT5slFgEFNKNRXYVJL9Q3+JrzPQOaSMYAE5lp4ysKEg/tCewNRlOXZcEmdTRpE3u47K",
	"U7064st/iNktjAaXtbmM+X5kfSpIfh1pwuM6tICxz+Xm/CWbSqWr9qCH/sfGtrI3x+69eetYpXlHcui9",
	"7NwlpuhPd47jVwLl9Dg9bojfhLES+Y7je93AYbWcGOSb6ZHYmb0zeC1sXSrYEnxZP8+fbOXqQAyfWJNR",
	"5R4e4MOy8uDJEWMgBds9KBvgbnafQbF3BRl/93CfQW0UsZeWCe429+kypQ34CsuSGCR6mo3FfGsPXdT4",
	"lenZU+BimHa9PT+JTggjM/qQCW1yKxZxHmTCOjLotFiI5o5Y+Gbl8G8AAAD//z0zcOXUCgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
